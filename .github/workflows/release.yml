name: Build
on:
  workflow_dispatch:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [master, main]
  # Trigger the workflow on any pull request
  #pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-unknown-linux-musl
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

    runs-on: ${{ matrix.os }}

    outputs:
      version: ${{ steps.properties.outputs.version }}

    steps:
      - name: Setup code
        uses: actions/checkout@v4

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt install -qq -y musl-tools --no-install-recommends

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=$｛｛ matrix.target ｝｝

      - name: Package for linux-musl
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          zip --junk-paths rc-$｛｛ matrix.target ｝｝ target/$｛｛ matrix.target ｝｝/release/rc

      - name: Package for windows
        if: matrix.target == 'x86_64-pc-windows-msvc'
        run: |
          powershell Compress-Archive -Path target/$｛｛ matrix.target ｝｝/release/rc.exe -DestinationPath rc-$｛｛ matrix.target ｝｝.zip

      - name: Package for macOS
        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          zip --junk-paths rc-$｛｛ matrix.target ｝｝ target/$｛｛ matrix.target ｝｝/release/rc

      - name: Package for macOS
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          zip --junk-paths rc-$｛｛ matrix.target ｝｝ target/$｛｛ matrix.target ｝｝/release/rc

      - uses: actions/upload-artifact@v2
        with:
          name: build-$｛｛ matrix.target ｝｝
          path: rc-$｛｛ matrix.target ｝｝.zip

      # - uses: Swatinem/rust-cache@v1

      # - name: Build release version
      #   run: cargo build --verbose --release --target=${{ matrix.target }}

      # - name: Export properties
      #   id: properties
      #   shell: bash
      #   run: |
      #     VERSION="$(cargo run --bin version)"
      #     echo "::set-output name=version::$VERSION"

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: build-${{ matrix.target }}-${{steps.properties.outputs.version}}
      #     path: target/${{ matrix.target }}/release/main

  # draft-release:
  #   name: Release Draft
  #   if: github.event_name != 'pull_request'
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Check out current repository
  #     - name: Fetch Sources
  #       uses: actions/checkout@v4

  #     # Remove old release drafts by using the curl request for the available releases with draft flag
  #     - name: Remove Old Release Drafts
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         curl -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
  #           | tr '\r\n' ' ' \
  #           | jq '.[] | select(.draft == true) | .id' \
  #           | xargs -I '{}' \
  #         curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/{}
  #     - name: Create a draft release
  #       uses: actions/create-release@v1
  #       id: createDraftRelease
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ needs.build.outputs.version }}
  #         release_name: ${{ needs.build.outputs.version }}
  #         body: |
  #           ## Changelog
  #           - [ ]
  #         draft: true
  #         prerelease: false
  #     - name: Save upload url of this draft release.
  #       run: |
  #         echo '${{ steps.createDraftRelease.outputs.upload_url }}' > release_upload_url.txt
  #     - name: Upload `release_upload_url.txt`
  #       uses: actions/upload-artifact@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         name: draft-release
  #         path: release_upload_url.txt
  # attach-assets-to-release:
  #   strategy:
  #     matrix:
  #       target:
  #         - x86_64-apple-darwin
  #         - aarch64-apple-darwin
  #       include:
  #         - target: x86_64-apple-darwin
  #           os: macos-latest
  #         - target: aarch64-apple-darwin
  #           os: macos-latest

  #   needs: [build, draft-release]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: draft-release
  #     - id: upload-url
  #       run: |
  #         echo "::set-output name=url::$(cat draft-release/release_upload_url.txt)"
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: build-${{ matrix.target }}-${{ needs.build.outputs.version }}
  #         path: build/
  #     - name: zip the artifact
  #       run: zip -j build/main.zip build/main
  #     - uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.upload-url.outputs.url }}
  #         asset_path: ./build/main.zip
  #         asset_name: main-${{ matrix.target }}-${{ needs.build.outputs.version }}.zip
  #         asset_content_type: application/zip
